rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // === USERS ===
    match /users/{userId} {
      // User hanya bisa baca datanya sendiri
      allow read: if request.auth != null && request.auth.uid == userId;

      // Driver bisa baca semua user data untuk melihat info client
      allow read: if request.auth != null
                    && exists(/databases/$(database)/documents/users/$(request.auth.uid))
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "driver";

      // Admin bisa baca semua user data
      allow read: if request.auth != null && request.auth.token.admin == true;

      // User bisa create data dirinya sendiri dengan role = "client"
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.role == "client";

      // User bisa update datanya sendiri
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    // Tidak boleh mengubah role
                    && request.resource.data.role == resource.data.role
                    // Tolak field null
                    && !request.resource.data.values().hasAny([null]);

      // Admin full akses
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // === PEMESANAN ===
    match /pemesanan/{docId} {
      // User bisa baca pesanan miliknya, admin bisa baca semua, driver bisa baca semua orders
      allow read: if request.auth != null && (
        resource.data.uid == request.auth.uid ||        // user reads own orders
        request.auth.token.admin == true ||            // admin reads all
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "driver"  // driver reads all orders
      );

      // User hanya bisa create pesanan untuk dirinya sendiri
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;

      // Admin bisa update/delete pesanan apapun
      allow update, delete: if request.auth != null && request.auth.token.admin == true;

      // User bisa update bukti pembayaran miliknya sendiri
      allow update: if request.auth != null
                    && resource.data.uid == request.auth.uid
                    && request.resource.data.diff(resource.data).changedKeys()
                          .hasOnly(["paymentMethod", "paymentProof", "paymentStatus", "waktuUpload"]);

      // Driver bisa update status pesanan yang belum ditugaskan atau yang ditugaskan kepadanya
      allow update: if request.auth != null
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "driver"
                    && (
                      resource.data.driverId == request.auth.uid ||  // order already assigned to this driver
                      !exists(/databases/$(database)/documents/pemesanan/$(resource.id)/driverId) ||  // no driver assigned yet
                      resource.data.driverId == null ||              // driverId is null
                      resource.data.status == "approve sewa"         // order is approved for cash payment
                    )
                    && request.resource.data.diff(resource.data).changedKeys()
                          .hasOnly(["status", "driverId", "assignedAt", "updatedAt", "actualPaymentAmount", "paymentVerifiedAt"]);
    }

    // === MOBIL ===
    match /mobil/{mobilId} {
      // Semua user login bisa baca list mobil
      allow read: if request.auth != null;

      // Admin bisa full akses
      // User bisa update status saat menyewa
      // Driver bisa update status saat menyelesaikan pembayaran
      allow write: if request.auth != null && (
        request.auth.token.admin == true ||
        (
          request.resource.data.status == "disewa" &&
          request.resource.data.tersedia == false
        ) ||
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "driver" &&
          request.resource.data.tersedia == true &&
          request.resource.data.status == "normal"
        )
      );
    }

    // === NOTIFICATIONS ===
    match /notifications/{notifId} {
      // User bisa baca notif miliknya, admin bisa baca semua
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );

      // User bisa bikin notif untuk dirinya sendiri, atau untuk admin
      allow create: if request.auth != null && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userId == "admin" ||
        request.auth.token.admin == true
      );

      // User bisa update notif miliknya, admin bisa update semua
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.auth.token.admin == true
      );
    }

    // === DRIVER VERIFICATION ===
    match /vehicleVerifications/{docId} {
      allow read, write: if request.auth != null && (
        resource.data.driverId == request.auth.uid ||  // driver access
        request.auth.token.admin == true               // admin access
      );
    }

    // === PAYMENT VERIFICATION ===
    match /paymentVerifications/{docId} {
      allow read, write: if request.auth != null && (
        resource.data.userId == request.auth.uid ||    // user access
        resource.data.driverId == request.auth.uid ||  // driver access
        request.auth.token.admin == true               // admin access
      );
    }
  }
}
